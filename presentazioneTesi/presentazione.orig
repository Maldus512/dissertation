\documentclass[table,xcdraw]{beamer}
\usetheme{Madrid}

\usepackage[utf8]{inputenc}
\usepackage{default}
\usepackage[T1]{fontenc}
\usepackage{wrapfig}
\usepackage[export]{adjustbox}
\usepackage{wrapfig}
\usepackage{verbatim}

\begin{document}

\title[MaldOS]
{{\huge\textsc{MaldOS}:} \\
a Moderately Abstracted Layer for Developing Operating Systems}
\author[Mattia Maldini]
{Mattia Maldini\\[3mm]Relatore: Renzo Davoli\\[3mm]}

\institute[Università di Bologna]
{
  Università di Bologna
}
\date[Laurea 2019]
{Sessione di laurea 14 marzo 2019}
\subject{Informatica}

\frame{\titlepage}

\begin{frame}[fragile]
    Structuring an Operating Systems course can be a thorny task. \\
    \bigskip
    Topics like scheduling, parallel programming, virtual memory and context switching are 
    hard to understand via a purely abstract approach, and developing a concrete 
    example is inherently non trivial.\\
    \bigskip
    Examples might be implemented as user space programs, but they would lose
    some details that deeply characterize kernel development. On the other end
    one could work, bare metal, on a real processor, but this entails many 
     nuances unnecessary for students.

    \begin{comment}
        Quello dei sistemi operativi e' un argomento particolarmente spinoso 
        in un contesto
        di insegnamento. I concetti che vengono coperti (scheduling, programmazione
        parallela, memoria virtuale...) possono essere compresi intuitivamente ma
         sono difficili da interiorizzare senza un approccio pratico; 
         approccio pratico che, considerata l'inerente complessita' 
         dell'argomento, e' a sua volta complesso da applicare.

        volendo strutturare un esempio da implementare, non e'
        immediato decidere quali argomenti debbano essere coperti,
         con che grado di completezza e con quali strumenti a
        disposizione, quanto l'ambiente in cui lavorano debba essere semplificato.

        In generale, un esempio e' tanto piu' interessante quanto piu' e' 
        aderente alla realta',
        ma la realta' dei sistemi operativi porta con se' complicazioni che
        vanno molto oltre alle competenze che ci si aspetta dagli studenti

        E' necessario trovare un equilibrio tra concretezza e approcciabilita'
        del progetto.
    \end{comment}
\end{frame}

\begin{frame}[fragile]
    A previous solution to this issue was the $\mu$MPS family of emulators; this
    work proposes a slight shift in the form of an abstraction layer allowing for
    easier development on real hardware.
    \bigskip

    \begin{figure}[b]
    \includegraphics[scale=0.54]{scale.png}
    \end{figure}

    \begin{comment}
        Esiste una ricca letteratura sull'argomento, ma questo lavoro parte dall'
        approccio di uMPS, un emulatore ad-hoc che permette di sviluppare un
        sistema operativo per processori MIPSEL; questa e ' soluzione applicata 
        dal professor Davoli nel suo corso di Sistemi Operativi: si richiede agli
        studenti di creare sistema operativo piccolo ma completo partendo da zero.

        MaldOS e' una variazione sul tema; e' un acronimo per Moderately
        Abstracted Layer for Developing Operating Systems, ovvero un layer
        che renda piu' semplice (ma non troppo) l'approccio all'hardware di
        un dispositivo, il Raspberry Pi 3, con lo scopo di sviluppare un 
        sistema operativo - opposto all'emulatore di uMPS.
        
        Sostanzialmente, si tratta di un tentativo di spostare il lavoro verso
        un approccio ancora piu' pratico, senza pero' perdere terreno in 
        termini di chiarezza e coerenza degli argomenti trattati.
    \end{comment}
\end{frame}

\begin{frame}[fragile]
    \frametitle{Tradeoffs}
    \textbf{$\mu$MPS2} allows students to work in a simplified environment 
    while still being
    faithful to the real MIPS architecture, providing an interesting experience.
    However
    \begin{itemize}
        \item it is still abstract work, as the resulting OS will never run on a real device
        \item $\mu$MPS is an ad-hoc emulator
        \item Its debugging facilities lack step-by-step execution of C code
        \item MIPS is a dated architecture
    \end{itemize}
    \begin{comment}
        I motivi che mi hanno spinto a studiare un'alternativa all'approccio
        di uMPS sono alcuni caveat nel risultato che ottiene.

        Pur appoggiandosi a un'architettura reale, la macchina di uMPS e' comunque
        astratta e inesistente; il lavoro sviluppato non trova quindi corrispondenze
        al di fuori dell'emulatore.

        Inoltre, uMPS e' un software di nicchia sviluppato ad-hoc: per quanto 
        questo abbia dato piena liberta' e precisione nell'implementazione,
        ne limita anche le prospettive di manutenibilita' ed estensioni future,
        oltre a essere meno interessante per gli studenti che probabilmente
        lo dimenticheranno dopo aver passato l'esame. 
        
        Terzo, mentre uMPS offre una interfaccia di debug specifiche e sofisticate, 
        ha il grande difetto di permettere l'esecuzione step-by-step 
        soltanto sulla versione disassemblata dell'eseguibile, e non
        sul codice C, una feature che semplificherebbe significativamente il
        lavoro degli studenti.

        Infine, MIPS e' un'architettura ormai datata, e per gli studenti puo'
        essere piu' interessante studiare ambienti piu' moderni e diffusi, come ARM.
    \end{comment}
\end{frame}

\begin{frame}[fragile]
    \frametitle{Tradeoffs}
    \textbf{MaldOS} is an abstraction layer devised to reproduce an $\mu$MPS-like simplified
    environment on a real device and architecture, the Raspberry Pi 3 and ARMv8.
    \begin{itemize}
        \item it is an extremely practical example, and the result can be run on a real machine
        \item it relies on general purpose software (namely, Qemu and GDB)
        \item its debugging facilities are less specific but more powerfull (full GDB support)
        \item ARM is a more modern and widespread environment
    \end{itemize}
    \begin{comment}
        Con MaldOS si cerca di coprire queste mancanze.

        Per prima cosa il progetto e' creato per architettura ARM (versione 8),
        piu' moderna e diffusa rispetto a MIPS.

        Oltre a usare una architettura reale, si appoggia anche a 
        un dispositivo esistente, raggiungendo una maggiore aderenza al
         processo di sviluppo di un sistema operativo e dando agli studenti
        la soddisfazione di vedere il proprio lavoro eseguito su un computer 
        a tutti gli effetti.

        L'hardware da solo sarebbe un ambiente di sviluppo inclemente; serve comunque
        un emulatore. Trattandosi di un dispositivo diffuso ci si puo' avvalere 
        di Qemu, il celebre emulatore general purpose e open source che ha da poco
        aggiunto un supporto per Raspberry Pi.

        Lavorando su qemu si ottengono tutti i benefici 
        del caso, tra cui il pieno supporto di GDB; essendo software general 
        purpose viene a mancare l'ispezione dettagliata dei registri di
        sistema che offre uMPS , ma e' in generale un debugger 
        piu' sofisticato e completo (che include anche l'esecuzione 
        step-by-step di codice C).
    \end{comment}
\end{frame}

\begin{frame}[fragile]
    \frametitle{Bare Metal}
    The problem with a real architecture is the intrinsic complexity of hardware
    management. The abstraction layer softens the approach by partially taking care 
    of initialization and configuration procedures.
    \begin{figure}[b]
    \includegraphics[scale=0.7]{raspberrypi.png}
    \end{figure}
    \begin{comment}
        Questi sono i vantaggi che si cerca di ottenere.

        Come gia' detto, l'astrazione deve essere soltanto parziale; alcuni tratti
        dell'hardware, del "bare metal development" sono considerati parte integrante
        dell'esperienza; altri sono soltanto un fastidio. 
        Seguendo questa filosofia, per esempio,
        Alcune periferiche sono troppo complesse e l'interazione deve essere 
        modificata emulando un set di registri piu' semplice; e' il caso
        del lettore di schede SD.
        Altre invece, come le interfacce UART a caratteri, hanno gia' un'interfaccia
        sufficientemente approcciabile e possono essere usate senza itermediari.

        Come nell'immagine quindi alcune parti dell'hardware sono lasciate 
        direttamente esposte ; altre, invece, vengono controllate avendo
        le routine di MaldOS come intermediario; 
        per questo il layer e' solo "moderatamente astratto".
    \end{comment}
\end{frame}

\begin{comment}
\begin{frame}[fragile]
    \frametitle{Initialization}
    \begin{itemize}
        \item A proper linker script is setup beforehand
        \item Move to the correct level of execution
        \item Prepare memory structure (stack pointers and such)
        \item Boot all four kernels and park three
        \item Prepare the C environment (zero bss section)
        \item Configure and initialize all real devices (UART, screen, SD)
    \end{itemize}

    \begin{comment}
        Il primo e' l'inizializzazione. Prima ancora di 
        eseguire il programma e' necessario organizzare adeguatamente la memoria
        tramite un linker script che posizioni il kernel a un certo indirizzo e
        ponga le basi per l'esecuzione.
        Le prime operazioni riguardano la configurazione dei registri di sistema
        e lo spostamento al livello di esecuzione corretto; dopodiche' bisogna
        preparare stack pointer e interrupt handler per i livelli di esecuzione
        interessati. Inizialmente soltanto uno dei quattro core e' attivo: gli
        altri tre devono essere svegliati e messi in pausa, pronti per lavorare.
        Fino a questo punto non c'e' un ambiente C completo, e si deve lavorare
        in Assembler; da qui si inizializza
        la sezione .bss delle variabili globali e si passa il controllo a una
        routine C che passa a configurare tutti i dispositivi.
        Solo dopo tutte queste preparazioni si puo' saltare al codice fornito
        dallo studente, che quindi vede soltanto la classica funzione 'main'
\end{frame}
\end{comment}

\begin{frame}[fragile]
    \frametitle{Interrupt Management}
    \makebox[\linewidth]{
        \includegraphics[scale=0.58]{execution_levels.png}
    }

    \begin{comment}
        MaldOS viene compilato e linkato staticamente insieme al codice fornito
        dallo studente.
        Riassumendone molto il funzionamento,
        dopo aver inizializzato il sistema passa il controllo al kernel
        dello studente e lo riprente nel caso di interrupt.
        ARMv8 specifica 4 livelli di esecuzione; di questi, il terzo e' relativo
        a controlli di sicurezza e non e' interessante; il primo 
        Gli studenti che sviluppano sul layer di astrazione sono interessati soltanto
        ai primi due, il livello non privilegiato per i processi (EL0) e quello
        elevato per il kernel(EL1).
        Il livello EL2 e' pensato per ospitare un hypervisor, ovvero un'entita' 
        che gestisca altri sistemi operativi virtualizzati. 
        Il layer di astrazione vive a cavallo tra EL2 ed EL1; questo perche' 
        le eccezioni in ARMv8 sono molto eterogenee, ed e' stato usato il 
        livello di esecuzione reputato piu' conveniente caso per caso. A volte 
        l'handler parte da EL2 per poi scendere a EL1, altre rimane sempre a EL1.

        durante il suo tempo di esecuzione, il layer di astrazione ha due compiti
        principali:

        da una parte si occupa di dare al kernel "ospite" una
        gestione omogenea degli interrupt, partendo sempre da EL1 e 
        impacchettando in locazioni di memoria predefinite le informazioni
        relative all'avvenuto context switch.

    \end{comment}
\end{frame}

\begin{frame}[fragile]
    \frametitle{Emulated Devices}
    \textbf{MaldOS} creates $\mu$MPS-style emulated devices with an ideal interface.
    Thanks to the mailbox mechanism the integration is seamless.

    \bigskip
    \begin{minipage}{0.49\textwidth}
        \begin{table}[]
            \begin{tabular}{|c|}
            \hline
            \rowcolor[HTML]{9B9B9B} 
            Virtual Disk device registers \\ \hline
            status register       \\ \hline
            command register      \\ \hline
            data 0 register       \\ \hline
            data 1 register       \\ \hline
            mailbox register      \\ \hline
            \end{tabular}
        \end{table}
    \end{minipage}
    \begin{minipage}{0.49\textwidth}
        \begin{table}[]
            \begin{tabular}{c}
            \hline
            \rowcolor[HTML]{9B9B9B} 
            \multicolumn{1}{|c|}{\cellcolor[HTML]{9B9B9B}EMMC device registers} \\ \hline
            \multicolumn{1}{|c|}{second argument register}                      \\ \hline
            \multicolumn{1}{|c|}{block size count register}                     \\ \hline
            \multicolumn{1}{|c|}{first argument register}                       \\ \hline
            \multicolumn{1}{|c|}{command register}                              \\ \hline
            \multicolumn{1}{|c|}{response registers (4)}                        \\ \hline
            \multicolumn{1}{|c|}{status register}                               \\ \hline
            \multicolumn{1}{|c|}{control register (2 of 3)}                     \\ \hline
            \multicolumn{1}{|c|}{interrupt register}                            \\ \hline
            \multicolumn{1}{|c|}{interrupt mask register}                       \\ \hline
            \multicolumn{1}{r}{... 11 more}                                    
            \end{tabular}
            \end{table}
    \end{minipage}

    \begin{comment}
        Dall'altra gestisce l'emulazione di alcuni dispositivi.
        sulla destra sono elencati alcuni dei registri per il controllo del 
        dispositivo: ce ne sono quasi trenta, disposti in ordine sparso e
        con funzioni eterogenee. Per semplificare l'accesso MaldOS legge il
        contenuto della memoria e considera alcuni file speciali come 
        memorie di massa a loro volta. L'interfaccia fornita per questi dispositivi
        e' sulla sinistra, composta da soli 5 registri con funzioni intuitive
        (seguendo l'esempio di uMPS).
        Non essendo veri registri il passaggio dei comandi avviene tramite 
        il meccanismo delle mailbox, gia' presente nel sistema originale e che
        quindi si inserisce in maniera molto naturale nel complesso.
    \end{comment}
\end{frame}

\begin{frame}[fragile]
    \frametitle{Virtual Memory}
    \vspace{-2cm}
    \begin{wrapfigure}{r}{0.65\textwidth}
        \includegraphics[scale=0.35]{ttbr.png}
    \end{wrapfigure}
    The ARMv8 MMU is remarkably flexible, so the virtual memory configuration is left
    mostly untouched.
    Students are assisted by changing page tables every time the kernel context
    switched in.

    \begin{comment}
        Quarto e ultimo aspetto, la memoria virtuale. Posto che la gestione di una
        MMU e' considerato uno sforzo inerentemente complesso, l'interfacciamento
        con il sistema rimane sostanzialmente intoccato.
        L'unica difficolta' sta nella configurazione iniziale: in generale, la
        memoria virtuale e' una funzionalita' che viene mantenuta sempre attiva;
        uno dei problemi iniziali dell'architettura MIPS era proprio l'impossibilita'
        di "spegnere" la MMU.
        Essendo in parte vicino al mondo embedded, l'architettura ARM permette
        di disattivare la traduzione di memoria; tuttavia rimane un meccanismo
        fortemente integrato nel sistema: esistono due registri, ttbr0 e ttbr1,
        che puntano a due tabelle delle pagine diverse; la discriminante per quale
        usare non e' pero' il livello di esecuzione (come sarebbe conveniente), 
        ma i due byte piu' significativi dell'indirizzo. Per usare una page table 
        diversa quindi il kernel deve apparire come caricato a un indirizzo di
        memoria inesistente, il che e' inconciliabile con una attivazione tardiva
        della MMU. Per risolvere questo problema gli handler degli interrupt scambiano
        i due registri TTBR0 e TTBR1 prima di passare il controllo al kernel,
        ottenendo l'impressione di page table legate al livello di esecuzione.
    \end{comment}
\end{frame}

\begin{comment}
\begin{frame}[plain,fragile]
    \frametitle{Qemu and Debugging}
    \makebox[\linewidth]{
        \includegraphics[width=12.5cm,height=8cm]{gdbgui.png}
    }

    \begin{comment}
        Mentre il kernel e' in esecuzione su Qemu puo' essere debuggato usando
        GDB. Non viene fornita un'interfaccia specializzata per il progetto, ma
        nel caso sarebbe relativamente semplice implementarne una: GDB mette a
        disposizione un interprete di comandi "macchina" proprio per
        poter costruire interfacce grafiche sofisticate. Per la durata di questo
        progetto e' stata usata GDBGUI, un tool Python che agisce da webserver
        e permette di debuggare tramite browser. Si puo' eseguire il codice passo
        per passo, ispezionare variabili, stabilire breakpoint, leggere la memoria
        e visualizzare separatamente i quattro core del processore.
\end{frame}
\end{comment}

\end{document}